default:
  interruptible:                   true
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure

stages:
  - lint
  - test
  - build
  - publish

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CARGO_INCREMENTAL:               0
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  CI_IMAGE:                        "paritytech/ci-linux:production"

.publish-refs:                     &publish-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # i.e. v1.0, v2.1rc1

.common-refs:                      &common-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     1 days
    paths:
      - artifacts/

.rust-info-script:                 &rust-info-script
  - rustup show
  - cargo --version
  - rustup +nightly show
  - cargo +nightly --version
  - bash --version
  - sccache -s

.docker-env:                       &docker-env
  image:                           "${CI_IMAGE}"
  before_script:
    - *rust-info-script
  tags:
    - linux-docker

.kubernetes-env:                   &kubernetes-env
  image:                           "${CI_IMAGE}"
  tags:
    - kubernetes-parity-build

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     1 days
    paths:
      - ./artifacts/

#### stage:                        lint

fmt:
  stage:                           lint
  <<:                              *docker-env
  <<:                              *common-refs
  script:
    - time cargo +nightly fmt --all -- --check
  # Remove me when pipeline stabilizes
  allow_failure:                   true

clippy:
  stage:                           lint
  <<:                              *docker-env
  <<:                              *common-refs
  script:
    - time cargo +nightly clippy --all-targets -- -D warnings
  # Remove me when pipeline stabilizes
  allow_failure:                   true

check:
  stage:                           lint
  <<:                              *docker-env
  <<:                              *common-refs
  script:
    - time cargo +nightly check --all-targets --all-features --workspace

#### stage:                       test

test:
  stage:                           test
  <<:                              *docker-env
  <<:                              *common-refs
  script:
    - time cargo test --all-targets --workspace

#### stage:                       build

build:
  stage:                           build
  <<:                              *common-refs
  <<:                              *docker-env
  <<:                              *collect-artifacts
  script:
    - time cargo build --release
    - mkdir artifacts || echo "dir exists"
    - cp $CARGO_TARGET_DIR/release/polkadot-introspector artifacts/

#### stage:                       publish

publish-docker:
  stage:                           publish
  variables:
    DOCKERFILE:                    scripts/dockerfiles/polkadot-introspector_injected.Dockerfile
    IMAGE_NAME:                    docker.io/paritytech/polkadot-introspector
  needs:
    - job:                         build
      artifacts:                   true
  <<:                              *publish-refs
  <<:                              *kubernetes-env
  image:                           quay.io/buildah/stable
  before_script:
    - if [[ "${CI_COMMIT_TAG}" ]]; then
        VERSION=${CI_COMMIT_TAG};
      elif [[ "${CI_COMMIT_SHORT_SHA}" ]]; then
        VERSION=${CI_COMMIT_SHORT_SHA};
      fi
    - echo "Effective tags = ${VERSION} sha-${CI_COMMIT_SHORT_SHA} latest"
  script:
    - test "$Docker_Hub_User_Parity" -a "$Docker_Hub_Pass_Parity" ||
        ( echo "no docker credentials provided"; exit 1 )
    - buildah bud
        --format=docker
        --build-arg VCS_REF="${CI_COMMIT_SHA}"
        --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
        --tag "$IMAGE_NAME:$VERSION"
        --tag "$IMAGE_NAME:latest"
        --file "$DOCKERFILE" .
    - echo "$Docker_Hub_Pass_Parity" |
        buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - buildah info
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
    - buildah push --format=v2s2 "$IMAGE_NAME:latest"
  after_script:
    - buildah logout --all
